데이터 베이스(DBMS)
=========================
Data Persistence : 파일 -> DBMS
DataWareHouse : 정보에 입각한 의사결정을 내릴 수 있도록 분석 가능한 정보의 중앙 레포지토리
Data Mining : 대규모로 저장된 데이터 안에서 체계적이고 자동적으로 통계적 규칙이나 패턴을 찾아내는 것

1. 제품의 종류 : Oracle, MS-SQL Server, DB2, informix, sybase, mysql, ....

2. 연결 방식
	(1) 로컬 DBMS : Access, SQLite
	(2) 네트워크 DBMS : 서버용, 클라이언트용

3. MySQL의 클라이언트 프로그램
	(1) 콘솔용 : mysql.exe(서버용 : mysqld.exe)
	(2) 윈도우용
		- workbench
		- HeidiSql

4. 데이터의 저장 형태
	(1) 계층형 DB : Tree
	(2) 네트워크형 DB : Graph
	(3) 관계형 DB : Table
	(4) 객체지향형 DB
	(5) 객체관계형 DB

5. DB 단위
	필드(속성) < 레코드(튜플) < 테이블(파일) < DataBase


6. DB 서버에 접속
	(1) 콘솔 이용
		mysql -uroot -p1111
		mysql -uroot -p
		mysql -h127.0.0.1 -uroot -p 

		show databases;
		use db명;
		show tables;
		desc 테이블명;

	(2) 실습 준비
		1) scott.sql을 이용해서 sample data 준비
			- 접속되어 있지 않은 상태 : mysql -uroot -p < scott.sql
			- 접속되어 있는 상태 : source C:\netsong7\database\scott.sql

		2) sakila와 world 샘플을 백업
			mysqldump -uroot -p sakila > sakila.sql
			mysqldump -uroot -p world > world.sql


7. SQL(Structured Query Language)
(1) DDL(Data Definition Language) : 데이터 정의어
	CREATE 
	DROP
	ALTER

(2) DML(Data Manipulation Language) : 데이터 조작어
	INSERT
	UPDATE
	DELETE

(3) QL(Query Language) : 데이터 질의어
	SELECT

(4) DCL(Data Control Language) : 데이터 제어어 (보안, 인증, 시스템관리, 트랜젝션 관리 등)
	GRANT, REVOKE, ...

* 두 가지 문법
	1) 표준 SQL(ANSI SQL) 
	2) 제품에 따른 SQL
		- Oracle : PL/SQL
		- MS : T-SQL

8. SELECT
(1) 기본 문법
	SELECT 필드명, 필드명, ... FROM 테이블명;
	SELECT * FROM 테이블명;
	------------------------------------------------------
	SELECT ename, sal, deptno, job FROM emp;
	SELECT * FROM emp;

	-- 필드의 가공 처리
	------------------------------------------------------
	SELECT empno, ename, sal,  FROM emp;

	-- 필드의 alias
	------------------------------------------------------
	SELECT ename, mgr manager, sal+200 as 'add salary' FROM emp;

	-- 중복 제거
	------------------------------------------------------
	SELECT distinct job FROM emp;

(2) 확장 문법
	1) 정렬 기능 : ORDER BY 필드명 [ASC | DESC], 필드명, ...
	------------------------------------------------------------------------
		-- 급여가 많은 순으로 이름, 급여, 부서코드 조회
		SELECT ename, sal, deptno FROM emp ORDER BY sal DESC;

		-- 부서별로 급여가 적은 순으로 이름, 급여, 부서코드 조회
		SELECT ename, sal, deptno FROM emp ORDER BY deptno DESC, sal DESC;

	2) 조건 기능(레코드 필터링) : WHERE 조건문
	-------------------------------------------------------------------------
		-- 급여가 3000$ 이상인 직원의 사번, 이름, 업무, 급여를 조회
		SELECT empno, ename, job, sal FROM emp WHERE sal >= 3000;

		-- 업무가 manager인 직원의 이름, 부서, 업무, 급여를 조회
		SELECT ename, deptno, job, sal FROM emp WHERE job = 'manager';

		-- 부서가 20이고 업무가 analyst인 직원의 이름, 부서, 업무, 급여를 조회
		SELECT ename, deptno, job, sal FROM emp WHERE deptno=20 AND job='analyst'; 

		-- 급여가 1500이상 2500이하를 받는 직원의 이름, 부서, 업무, 급여를 조회
		SELECT ename, deptno, job, sal FROM emp WHERE  sal>=1500 AND sal<=2500;
		SELECT ename, deptno, job, sal FROM emp WHERE  sal BETWEEN 1500 AND 2500;

		-- 급여가 1500이상 2500이하를 받는 직원의 이름, 부서, 업무, 급여를 조회
		-- 단, 급여가 많은 순으로 조회
		SELECT ename, deptno, job, sal FROM emp 
			WHERE  sal BETWEEN 1500 AND 2500 ORDER BY sal DESC;

		-- 업무가 clerk, salesman, analyst 인 직원의 이름, 부서, 업무, 급여를 조회
		SELECT ename, deptno, job, sal FROM emp
			WHERE job='clerk' OR job='salesman' OR job='analyst';

		SELECT ename, deptno, job, sal FROM emp
			WHERE job IN('clerk', 'salesman', 'analyst');

		-- 1982년 1월 1일 이후에 입사한 직원의 이름, 업무, 입사일자를 조회
		SELECT ename, job, hiredate FROM emp WHERE hiredate > '1982^1^1';

		-- 커미션이 없는 직원의 이름, 부서, 업무, 급여, 커미션을 조회
		SELECT ename, deptno, job, sal, comm FROM emp WHERE comm IS null;
		SELECT ename, deptno, job, sal, comm FROM emp WHERE job != 'salesman';

		-- 커미션이 있는 직원의 이름, 부서, 업무, 급여, 커미션을 조회
		SELECT ename, deptno, job, sal, comm FROM emp WHERE comm IS NOT null;

	3) Like 연산자
		% : 0개 이상의 문자를 대체
		_ : 1개 문자를 대체
		-------------------------------------
		beau% : beau, beau로 시작하는 모든 문자열
		beau_ : beaua, beaub, ...

		-- 이름이 s로 시작하는 직원의 이름, 업무, 급여를 조회
		SELECT ename, job, sal FROM emp WHERE ename LIKE 's%';

	4) GROUP BY 필드명 [, 필드명, 필드명, ...] [HAVING 조건문]
		-- 부서별로 급여 평균, 최저 급여를 조회
		SELECT deptno, avg(sal), min(sal) FROM emp GROUP BY deptno;

		-- 부서별로 급여평균, 최저 급여를 조회(단, 급여평균이 높은 순으로 조회)
		SELECT deptno, avg(sal) as '급여평균', min(sal) as '최저급여' FROM emp 
			GROUP BY deptno ORDER BY avg(sal) DESC;

		-- 전체 급여의 합계가 5000을 초과하는 업무에 대해 급여 합계를 조회
		SELECT job, sum(sal) FROM emp 
			GROUP BY job HAVING sum(sal) > 5000;

		-- 전체 급여의 합계가 5000을 초과하는 업무에 대해 급여 합계를 조회
		-- (단, salesman은 제외)
		SELECT job, sum(sal) FROM emp 
			GROUP BY job HAVING sum(sal) > 5000 AND job != 'salesman';

		SELECT job, sum(sal) FROM emp WHERE job != 'salesman'
			GROUP BY job HAVING sum(sal) > 5000;

(3) 연습 문제
	1. 1981년에 입사한 사람의 이름, 업무, 입사일자 조회
	SELECT ename, job, hiredate FROM emp WHERE hiredate BETWEEN '810101' AND '811231';
	SELECT ename, job, hiredate FROM emp WHERE hiredate LIKE '81%'

	2. 사번이 7902, 7788, 7566인 사원의 이름, 업무, 급여, 입사일자 조회
	SELECT empno, ename, job, sal, hiredate FROM emp WHERE empno IN('7902', '7788', '7566');

	3. 업무가 manager, clerk, analyst가 아닌 직원의 이름, 업무, 급여, 부서번호 조회
	SELECT ename, job, sal, deptno FROM emp WHERE job NOT IN('manager', 'clerk', 'analyst');

	4. 업무가 president 또는 salesman이고 급여가 1500인 직원의 이름, 급여, 업무, 부서번호 조회
	SELECT ename, sal, job, deptno FROM emp WHERE job='president' OR job='salesman' AND sal=1500;
	SELECT ename, sal, job, deptno FROM emp WHERE (job='president' OR job='salesman') AND sal=1500;
	SELECT ename, sal, job, deptno FROM emp WHERE job IN('president', 'salesman') AND sal=1500;

	5. 가장 최근에 입사한 직원의 이름, 부서, 업무, 입사일자 조회
	SELECT ename, deptno, job, hiredate FROM emp ORDER BY hiredate DESC;
	SELECT ename, deptno, job, hiredate FROM emp ORDER BY hiredate DESC  LIMIT 1;

	6. 같은 부서내에서 같은 업무를 하는 직원의 급여가 많은 순으로 조회
	SELECT ename, deptno, job, sal FROM emp ORDER BY deptno, job, sal DESC;

	7. 커미션이 급여보다 10%이상 많은 직원의 급여가 많은 순으로 조회
	SELECT * FROM emp WHERE comm > sal*1.1;

	8. 이름에 L자가 2개 있고 30번 부서이거나 직속상사가 7782인 직원의 이름, 부서, 직속상사 조회
	SELECT ename, deptno, mgr FROM emp WHERE ename like '%L%L%' AND (deptno=30 OR mgr=7782);


9.  함수 (Single Row Function, Aggregation Function, ...)
(1) Single Row Function(String, Numeric, Data&Time)
	1) String Function
		ASCII(), CHAR()
		---------------------- 
		SELECT ascii('a'), char(98);

		LENGTH()
		------------
		SELECT ename, length(ename) FROM emp;
	
		INSTR()
		-----------
		SELECT instr('foobarbar', 'bar'), instr('foobarbar', 'love');

		LEFT(), RIGHT(), SUBSTR(), SUBSTRING()
		------------------------------------------------
		SELECT left('abcdefg', 3);
		SELECT substring('I love sql', 3);
		SELECT substring('I love sql', 3, 4);
		SELECT substring('I love sql', -3);
		SELECT substring('I love sql', -8, 3);

		LOWER(), UPPER()
		----------------------------
		SELECT lower('ABcdEF'), UPPER('ABcdEF');

		LTRIM(), RTRIM(), TRIM()
		-----------------------------------
		SELECT '              abc                 ';
		SELECT rtrim(ltrim('              abc                 ')) as trim;
		SELECT trim('              abc                 ') as trim;

	2) Numeric Function
		CEIL(), FLOOR(), ROUND(), TRUNCATE()
		-------------------------------------------------
		SELECT ceil(1.23), floor(1.78);
		SELECT round(1.23), round(1.23, 0), round(1.78, 1);
		SELECT truncate(1.78, 0), truncate(1.78, 1), truncate(1.78, -1);

		MOD()
		---------
		SELECT mod(29, 9), 20 mod 9, 20 % 9;

		RAND()
		-----------
		SELECT rand();

		/*
			n <= R < m
			floor(rand() * (m-n) + n)
		*/
		-- 7보다 크거나 같고 12보다 작은 범위내에서 난수를 뽑아라.
		SELECT floor(rand() * (12-7) + 7);

	3) Date & Time Function
		NOW(), SYSDATE(), CURDATE(), CURTIME()
		---------------------------------------------------------
		SELECT now();
		SELECT sysdate();
		SELECT curdate();
		SELECT curtime();
		
		YEAR(), MONTH(), DAYOFMONTH() : 연, 월, 일
		---------------------------------------------------------
		SELECT year(now()), month(now()), dayofmonth(now());
		SELECT dayofmonth('2021/05/19');

		DAYOFWEEK() : 1-일요일 , WEEKDAY() : 0-월요일
		--------------------------------------------------------------
		SELECT dayofweek(now()), weekday(now());

		DAYOFYEAR() : 현재까지의 일수
		-----------------------------------------
		SELECT dayofyear(now());

		DATE_ADD(), DATE_SUB(), ADDDATE()
		-----------------------------------------------
		SELECT DATE_ADD(now(), interval 5 year); 
		SELECT DATE_ADD(now(), interval 100 day); 
		
		그외
		-------
		SELECT datediff(now(), '2019/5/19');
		SELECT last_day(now());

(2) Aggregation Function : avg(), sum(), count(), max(), min()
	-- 업무가 salesman인 직원들의 급여 평균, 최고액, 최저액 , 합계를 조회
	SELECT avg(sal), max(sal), min(sal), sum(sal) FROM emp WHERE job='salesman';

	-- WHERE절에는 그룹함수를 사용할 수 없다.
	--SELECT empno, ename, hiredate FROM emp WHERE hiredate = max(hiredate); 

	SELECT count(empno) FROM emp;
	SELECT count(job) FROM emp;
	SELECT count(sal) FROM emp;
	SELECT count(*) FROM emp;
	SELECT count(comm) FROM emp;

(3) 기타 함수
	1) CONVERT()
		SELECT convert('20210420', DATE);
		SELECT convert(150, CHAR);

	2) CASE
	-----------
		-- 업무가  salesman이면 '커미션 있음'이라고 조회하고 그 외 업무는 '커미션 없음'이라고 조회
		SELECT ename, job, comm,  
			CASE
				WHEN job='salesman' THEN '커미션 있음'
				ELSE '커미션 없음'
			END as '커미션 여부'
		FROM emp;

	3) COALESCE()  : NULL값을 다른 값을 대체
		-- 현재 직원들의 총 급여를 조회
		SELECT ename, sal, comm, job, (sal + comm) as 총급여 FROM emp;

		SELECT ename, sal, comm, job, (sal + coalesce(comm, 0)) as 총급여 FROM emp;

(4) 예제
	* timestampdiff()
	1. 오늘부터 12월 25일까지 몇일이 남았는가?
		SELECT datediff('2021/12/25', now());

	2. 현재까지 근무한 직원들의 근무일수를 몇주 몇일로 조회.(단, 근무일수가 많은 사람 순으로 조회)
		SELECT ename, deptno, job, floor(datediff(now(), hiredate)/7) as weeks,  
			datediff(now(), hiredate) mod 7 as days	
		FROM emp ORDER BY weeks DESC, days DESC;

		SELECT ename, deptno, job, 
			concat(timestampdiff(week, hiredate, now()), '주', 
				datediff(now(), hiredate) mod 7, '일') as 근무일수
		FROM emp ORDER BY datediff(now(), hiredate) DESC;

	3. 10번 부서 직원들 중 현재까지의 근무월수를 계산해서 조회
		SELECT ename, timestampdiff(month, hiredate, now()) as '근무월수'
		FROM emp WHERE deptno=10;

	4. 20번 부서 직원들 중 입사일자로부터 13개월이 지난 후의 날짜를 조회
		SELECT ename, deptno, job, hiredate, 
			date_format(adddate(hiredate, interval 13 month), '%Y/%m/%d')as '13개월 후'
		FROM emp WHERE deptno=20;

	5. 모든 직원에 대해 입사한 달의 근무일수를 조회
		SELECT ename, deptno, job, hiredate, 
			datediff(last_day(hiredate), hiredate) as '근무일수'
		FROM emp;

	6. 현재 급여에 15%가 증가된 급여를 계산하여 사번,이름, 급여, 증가된 급여를 조회(단, 급여는 반올림하여 적용한다.)
		SELECT deptno, ename, sal, (round(sal * 1.15)) AS '증가된 급여' FROM emp;

	7. 이름, 입사일, 입사일로부터 현재까지의 월수, 급여,급여 총계를 조회
		SELECT ename, hiredate, (hiredate) AS '근속개월',  
		PERIOD_DIFF( CAST(DATE_FORMAT(NOW(),"%Y%m") AS UNSIGNED), 
			CAST(DATE_FORMAT(hiredate,"%Y%m") AS UNSIGNED)) AS months, 
		sal, 
		(PERIOD_DIFF( CAST(DATE_FORMAT(NOW(),"%Y%m") AS UNSIGNED), 
			CAST(DATE_FORMAT(hiredate,"%Y%m") AS UNSIGNED)) *sal) AS '급여 총계' FROM scott_emp;

		SELECT ename, hiredate, timestampdiff(month,hiredate,now()) as '근무월수',
			sal , sal*timestampdiff(month,hiredate,now()) as '총급여'
		FROM emp;

	8. 업무가 analyst이면 급여를 10%증가시키고 clerk이면 15%, manager이면 20%증가 시켜서 이름, 업무, 급여, 증가된 급여를 조회
		SELECT ename, job, sal,
    			round(case
        				when job = 'analyst' then round(sal * 1.1) 
       				when job = 'clerk' then round(sal * 1.15)
        				when job = 'manager' then round(sal * 1.2)
        				else sal
		    	end) as '증가된 급여'
		FROM emp;

	9. 이름의 첫글자가 k보다 크고 y보다 작은 직원의 이름, 부서, 업무를 조회하시오.
		SELECT ename, deptno, job
		FROM emp
		WHERE ascii(substr(ename,1,1)) > ascii('K') AND ascii(substr(ename,1,1)) < ascii('Y');

10. DML : INSERT, UPDATE, DELETE
	CREATE TABLE tbltest(
		id	int		not null,
		name	varchar(10)	null,
		regdate	datetime		
	);

(1) INSERT
	INSERT INTO 테이블명(필드명, ...) VALUES(값, ...);
	INSERT INTO 테이블명 VALUES(값, ...);
	-------------------------------------------------------------
	INSERT INTO tbltest(id, name) VALUES(1, 'hong');
	INSERT INTO tbltest VALUES(2, 'kim', now());
	INSERT INTO tbltest(name, id, regdate) VALUES('홍길동', 3, null);

(2) UPDATE
	UPDATE 테이블명
	SET 필드=값 [, 필드=값, ...]
	WHERE 조건문;
	----------------------------------------
	UPDATE tbltest
	SET id=100, name="lee", regdate=date_add(now(), interval 3 day)
	WHERE id=1;

	*. Workbench 사용 시 안전모드 해제
		Edit > Preferences > SQL Editor > Safe Update 체크박스 해제

(3) DELETE
	DELETE FROM 테이블명;
	DELETE FROM 테이블명 WHERE 조건문;
	------------------------------------------------------
	DELETE FROM tbltest;


11. Sub Query
(1) 다른 query문에 포함된 query문
(2) 반드시 ( ) 사용
(3) 연산자의 오른쪽에 와야 한다.
(4) 내부 query는 ORDER BY 사용 불가
(5) 연산자
	- 단일행 연산자 : 기본 연산자
	- 다중행 연산자 : IN, ANY, ALL, EXISTS, ...
(6) 다중열 비교
(7) 상관 Sub Query
--------------------------------------------------------
	-- scott의 급여보다 더 많이 받는 직원의 이름, 업무, 급여를 조회
	SELECT sal FROM emp WHERE ename='scott';
	SELECT ename, job, sal FROM emp WHERE sal>3000;

	SELECT ename, job, sal FROM emp 
		WHERE sal>(SELECT sal FROM emp WHERE ename='scott');


	-- 사번이 7521의 업무와 같고, 급여가 7934보다 많은 직원의 사번, 이름, 업무, 급여를 조회
	SELECT job FROM emp WHERE empno=7521;
	SELECT sal FROM emp WHERE empno=7934;
	
	SELECT empno, ename, job, sal FROM emp 
		WHERE job='salesman' AND sal>1300;

	SELECT empno, ename, job, sal FROM emp 
		WHERE job=(SELECT job FROM emp WHERE empno=7521) 
		AND 
		sal>(SELECT sal FROM emp WHERE empno=7934);

	-- 가장 최근에 입사한 직원의 이름, 부서, 업무, 입사일자 조회
	SELECT max(hiredate) FROM emp;
	SELECT ename, deptno, job, hiredate FROM emp WHERE hiredate='870523';

	SELECT ename, deptno, job, hiredate FROM emp 
		WHERE hiredate=(SELECT max(hiredate) FROM emp);

	-- 업무별 최소급여를 받는 직원의 사번, 이름, 부서코드를 조회
	SELECT distinct job FROM emp;
		CLERK
		SALESMAN
		MANAGER
		ANALYST
		PRESIDENT

	SELECT min(sal) FROM emp WHERE job='clerk';
	SELECT min(sal) FROM emp WHERE job='salesman';
	SELECT min(sal) FROM emp WHERE job='manager';
	SELECT min(sal) FROM emp WHERE job='analyst';
	SELECT min(sal) FROM emp WHERE job='president';

	SELECT empno, ename, deptno FROM emp WHERE sal=800;
	...
	------------------------------------------------------------------------------------
	SELECT job, min(sal) FROM emp GROUP BY job;
		job       | min(sal)
		----------+----------
		CLERK     |      800
		SALESMAN  |     1250
		MANAGER   |     2450
		ANALYST   |     3000
		PRESIDENT |     5000

	SELECT empno, ename, deptno FROM emp 
		WHERE sal=800 OR sal=1250 OR sal=2450 OR sal=3000 OR sal=5000;

	SELECT empno, ename, deptno FROM emp 
		WHERE sal IN(800, 1250, 2450, 3000, 5000);

	SELECT empno, ename, deptno FROM emp 
		WHERE sal IN(SELECT min(sal) FROM emp GROUP BY job);

	-- 업무별 최소급여보다 많이 받는 직원의 사번, 이름, 부서코드를 조회
	SELECT empno, ename, deptno FROM emp 
		WHERE sal>800 OR sal>1250 OR sal>2450 OR sal>3000 OR sal>5000;

	SELECT empno, ename, deptno FROM emp 
		WHERE sal > ANY(SELECT min(sal) FROM emp GROUP BY job);

	-- 업무별 최대급여 이상 받는 직원의 사번, 이름, 부서코드를 조회
	SELECT empno, ename, deptno FROM emp 
		WHERE sal >= ALL(SELECT max(sal) FROM emp GROUP BY job);


	-- 다중열 비교
	--------------------
		-- 'miller'의 급여와 보너스를 1500, 300로 변경
		SELECT sal, comm FROM emp WHERE ename='miller';  -- 1300, null

		UPDATE emp
		SET sal=1500, comm=300
		WHERE ename='miller';	

		/* 
		급여와 커미션이 30번 부서에 있는 직원들의 급여와 커미션이 같은 다른 부서 직원에 대해
		사번, 이름, 부서번호, 급여, 커미션을 조회
		*/
		SELECT empno, ename, deptno, sal, comm FROM emp
			WHERE sal IN(SELECT sal FROM emp WHERE deptno=30)
				AND
				comm IN(SELECT comm FROM emp WHERE deptno=30);


		SELECT empno, ename, deptno, sal, comm FROM emp
			WHERE (sal, comm) IN (SELECT sal, comm FROM emp WHERE deptno=30);

		UPDATE emp
		SET sal=1300, comm=null
		WHERE ename='miller';
	
	-- 상관 서브 쿼리
	----------------------
		-- 적어도 한명의 직원으로부터 보고를 받을 수 있는 직원의 사번, 이름, 업무, 부서를 조회
		SELECT empno, ename, job, deptno FROM emp e1
			WHERE exists(SELECT * FROM emp e2 WHERE e1.empno=e2.mgr);

		SELECT empno, ename job, deptno FROM emp
			WHERE empno IN(SELECT distinct mgr FROM emp);


	-- 기타 서브쿼리
	-------------------------
		SELECT * FROM emp WHERE deptno=30;
		SELECT * FROM (SELECT * FROM emp WHERE deptno=30) as t;  -- 인라인 뷰
		
		-- 테이블 복사
		INSERT INTO tbltest(id, name) SELECT empno, ename FROM emp;
		INSERT INTO tbltest(id, name) SELECT empno, ename FROM emp LIMIT 5;

	-- 연습 문제
	1. Blake와 같은 부서에 있는 모든 직원의 사번, 이름, 입사일자 조회
		SELECT empno, ename, hiredate, deptno FROM emp
		WHERE deptno = (SELECT deptno FROM emp where ename = 'Blake');

	2. SELECT empno, ename, deptno, sal, comm FROM emp
		WHERE (sal, comm) IN(SELECT sal, comm FROM emp WHERE deptno=30);
	이 쿼리에서 보너스가 null인 사람도 출력될 수 있도록 수정하시오.
		SELECT empno, ename, deptno, sal, comm FROM emp
		WHERE (sal, coalesce(comm, 0)) 
		IN(SELECT sal, coalesce(comm, 0) FROM emp WHERE deptno=30);

	3. 평균 급여 이상을 받는 직원들의  사번, 이름을 조회. 단, 급여가 많은 순으로 정렬
		SELECT empno, ename FROM emp
		WHERE sal >= (SELECT avg(sal) FROM emp)
		ORDER BY sal DESC;

	4. 이름에 T자가 들어가는 직원이 근무하는 부서에서 근무하는 직원의 사번,이름, 급여 조회
		SELECT empno, ename, sal FROM emp
		WHERE deptno IN (SELECT deptno FROM emp WHERE ename LIKE '%t%');

	5. 부서의 위치가 dallas인 모든 직원에 대해 사번, 이름, 급여, 업무조회
		SELECT empno, ename, sal, job FROM emp
		WHERE deptno = (SELECT deptno FROM dept WHERE loc = 'dallas');

	6. King에게 보고하는 모든 직원의 이름과 부서, 업무, 급여를 조회
		SELECT ename,deptno,job, sal FROM emp
		WHERE mgr = (SELECT empno FROM emp WHERE ename = 'King');

	7. 급여가 30번 부서의 최저급여보다 높은 직원의 사번, 이름, 급여 조회
		SELECT empno, ename, sal FROM emp
		WHERE sal > (SELECT min(sal) FROM emp WHERE deptno = 30);

	8. 10번부서에서 30번 부서의 직원과 같은 업무를 하는 직원의 이름과 업무를 조회
		SELECT ename, job FROM emp
		WHERE deptno = 10
		AND job IN (SELECT job FROM emp WHERE deptno = 30)

12. JOIN
(1) 여러 개의 테이블을 병합하여 하나의 결과를 도출하기 위한 방법
(2) 종류
	1) Cartesian Product Join(데카르트 곱 조인, CROSS 조인)
	2) Equi Join
		- 공통 필드의 레코드를 가져오는 방법(중복)
		- INNER JOIN(중복 제거)
	3) OUTER JOIN
		- INNER JOIN의 확장
			INNER JOIN + 공통되지 않은 레코드로 추출
		- 종류
			LEFT OUTER JOIN
			RIGHT OUTER JOIN
			FULL OUTER JOIN(mysql에서는 지원하지 않음)
	4) Non Equi Join
		- 서로 공통되지 않는 필드의 레코드를 가져오는 방법
	5) Self Join
		- 서로 같은 테이블을 복제하여 조인
---------------------------------------------------------------------------------
	
use testdb;

CREATE TABLE tblA(
	id	int	null,
	value	int	null
);

CREATE TABLE tblB(
	id	int	null,
	value	int	null
);

CREATE TABLE tblC(
	id	int	null,
	value	int	null
);

INSERT INTO tblA VALUES(1, 10);
INSERT INTO tblA VALUES(2, 20);
INSERT INTO tblA VALUES(3, 30);
INSERT INTO tblA VALUES(5, 50);
INSERT INTO tblA VALUES(7, 70);

INSERT INTO tblB VALUES(1, 10);
INSERT INTO tblB VALUES(2, 20);
INSERT INTO tblB VALUES(4, 40);
INSERT INTO tblB VALUES(5, 50);
INSERT INTO tblB VALUES(8, 80);

INSERT INTO tblC VALUES(1, 10);
INSERT INTO tblC VALUES(2, 20);
INSERT INTO tblC VALUES(7, 70);
INSERT INTO tblC VALUES(8, 80);
INSERT INTO tblC VALUES(9, 90);
===============================

-- INNER JOIN
	SELECT tblA.id, tblA.value FROM tblA INNER JOIN tblB ON tblA.id = tblB.id;
	SELECT a.id, a.value FROM tblA a INNER JOIN tblB b ON a.id = b.id;
	SELECT a.id, a.value FROM tblA a JOIN tblB b ON a.id = b.id;

	SELECT a.id, a.value FROM tblA a, tblB b WHERE a.id = b.id;
	SELECT a.id, a.value FROM tblA a, tblB b;

	-- 직원의 사번, 이름, 업무, 부서번호, 부서명을 조회
	SELECT empno, ename, job, emp.deptno, dname FROM emp JOIN dept 
	ON emp.deptno = dept.deptno;

	-- salesman의 업무를 수행하는 직원의 사번, 이름, 업무, 부서번호, 부서명을 조회
	SELECT empno, ename, job, emp.deptno, dname FROM emp JOIN dept 
	ON emp.deptno = dept.deptno AND job='salesman';

	SELECT empno, ename, job, emp.deptno, dname FROM emp JOIN dept 
	ON emp.deptno = dept.deptno 
	WHERE job='salesman';

	-- Newyork에서 근무하는 직원의 사번, 이름, 업무, 부서명 조회
	SELECT empno, ename, job, dname FROM emp JOIN dept
	ON emp.deptno = dept.deptno AND loc='NEW YORK';

------------------------------------------------------------------------------------------------

-- OUTER JOIN
	SELECT a.id, a.value, b.id, b.value FROM tblA a LEFT OUTER JOIN tblB b
	ON a.id = b.id;

	SELECT a.id, a.value, b.id, b.value FROM tblA a RIGHT OUTER JOIN tblB b
	ON a.id = b.id;

	/*
	직원들의 이름, 급여, 부서명, 근무지를 조회하시오. 단, 부서명과 근무지는 모두 출력할 수 있도록 하시오.
	*/
	SELECT ename, sal, dname, loc FROM  emp RIGHT OUTER JOIN dept
	ON emp.deptno = dept.deptno;

-------------------------------------------------------------------------------------------------------------------------------

-- NON EQUI JOIN
-------------------------
	-- 직원들의 사번, 이름, 업무, 급여, 급여 등급 조회
	SELECT empno, ename, job, sal, grade, losal, hisal 
	FROM emp INNER JOIN salgrade
	ON emp.sal >= salgrade.losal AND emp.sal <= salgrade.hisal;

--------------------------------------------------------------------------------------------------------------

-- SELF JOIN
-------------------
	-- 직원의 사번, 이름, 업무, 관리자, 관리자 이름을 조회
	SELECT e1.empno, e1.ename, e1.job, e1.mgr, e2.ename FROM emp e1  INNER JOIN  emp e2
	ON e1.mgr = e2.empno;

-------------------------------------------------------------------------------------------------------------

-- 세 개의 테이블 조인
	SELECT a.id, a.value FROM tblA a  INNER JOIN  tblB b
	ON a.id = b.id
	INNER JOIN tblC c
	ON b.id = c.id;

	SELECT a.id, a.value FROM tblA a, tblB b, tblC c
	WHERE a.id = b.id AND b.id = c.id;

------------------------------------------------------------------------------------------

-- 집합 연산자 : UNION, UNION ALL, INTERSECT(X), EXCEPT(X)
	SELECT deptno FROM emp
	UNION
	SELECT deptno FROM dept;

	SELECT deptno FROM emp
	UNION ALL
	SELECT deptno FROM dept;

---------------------------------------------------------------------------------------
(3) 연습 문제
	1) 말단 사원의 사번, 이름, 업무, 부서번호, 근무지를 조회
		SELECT empno, ename, job, e.deptno, loc 
		FROM emp e INNER JOIN dept d
		ON e.deptno = d.deptno
		WHERE empno NOT IN (SELECT coalesce(mgr, 0) FROM emp)
		ORDER BY hiredate DESC LIMIT 3;	
	

	2) Self Join 예제
		CREATE TABLE tblBook(
                          		author  varchar(20),
                          		title varchar(20)
		);

		INSERT INTO tblBook VALUES('최주현', '하늘과 땅');
		INSERT INTO tblBook VALUES('최주현', '바다');
		INSERT INTO tblBook VALUES('유은정', '바다');
		INSERT INTO tblBook VALUES('박성우', '문');
		INSERT INTO tblBook VALUES('최주현', '문');
		INSERT INTO tblBook VALUES('박성우', '천국');
		INSERT INTO tblBook VALUES('최지은', '천국');
		INSERT INTO tblBook VALUES('최주현', '천국');
		INSERT INTO tblBook VALUES('박성우', '고슴도치');
		INSERT INTO tblBook VALUES('서금동', '나');	

		- 한 권의 책에 대해 두 명 이상의 작가가 쓴 책 조회
			책 이름	작가명	작가명
			SELECT b1.title, b1.author, b2.author 
			FROM tblbook b1, tblbook b2
			WHERE b1.title = b2.title AND b1.author > b2.author; 
			

		- 한 권의 책에 대해 세 명의 작가가 쓴 책 조회
			책 이름	작가명	작가명	작가명
			SELECT b1.title, b1.author, b2.author, b3.author 
			FROM tblbook b1, tblbook b2, tblBook b3
			WHERE b1.title = b2.title AND b2.title = b3.title
				AND b1.author>b2.author AND b2.author > b3.author; 



13. 데이터 무결성(Data Integrity)
(1) What?, How?
	- 실체(Entity) 무결성 : 중복된 데이터를 방지
		Primary Key, Unique
	- 영역(Domain) 무결성 : 범위
		Check(mysql 미지원)
	- 참조(Reference) 무결성
		Foreign Key


(2) 컬럼의 속성
	- NN(Not Null) 속성
		Primary Key
		not null
	- ND(No Duplicate) 속성
		Primary Key
		Unique
	- NC(No Change) 속성
		Foreign Key

* Primary Key
--------------------
	- NN속성과 ND속성 지원
	- 한 테이블에 한 개만 사용
	- 여러 개의 컬럼을 묶어서 사용 가능(다른 제약들도 가능)

=================================================================

CREATE TABLE tblExam(
	id	int,
	name	varchar(10)
);

**** Primary Key ****

INSERT INTO tblExam(id) VALUES(1);
INSERT INTO tblExam(name) VALUES('hong');

DELETE FROM tblExam;

------ 기본키 추가
ALTER TABLE tblExam ADD CONSTRAINT pk_id PRIMARY KEY(id);

-- NN속성 확인
INSERT INTO tblExam(id) VALUES(1);
INSERT INTO tblExam(name) VALUES('hong');

-- ND속성 확인
INSERT INTO tblExam(id) VALUES(1);

------ 기본키 삭제
ALTER TABLE tblExam DROP PRIMARY KEY;
INSERT INTO tblExam(id) VALUES(1);

DROP TABLE tblExam;

-- 테이블 작성 시 기본기 추가

CREATE TABLE tblExam(
	id	int	PRIMARY KEY,
	name	varchar(10) 
);

-- 또는

CREATE TABLE tblExam(
	id	int,
	name	varchar(10),
	CONSTRAINT pk_id PRIMARY KEY(id, name) 
);

INSERT INTO tblExam VALUES(1, 'hong');
INSERT INTO tblExam VALUES(1, 'kim');
INSERT INTO tblExam VALUES(1, 'hong');

** 참고 **
-- tel 필드 추가
ALTER TABLE tblExam ADD tel char(10) not null;
DESC tblExam;

-- tel 필드의 null 변경
ALTER TABLE tblExam MODIFY tel char(15) null;

-- tel 필드 삭제
ALTER TABLE tblExam DROP tel;

**** Unique ****

DROP TABLE tblExam;

CREATE TABLE tblExam(
	id	int	UNIQUE,
	name	varchar(10) UNIQUE
);

-- 또는

CREATE TABLE tblExam(
	id	int,
	name	varchar(10),
	CONSTRAINT uk_id UNIQUE(id),
	CONSTRAINT uk_name UNIQUE(name)
);

-- ND 속성 지원여부
INSERT INTO tblExam(id) VALUES(1);
INSERT INTO tblExam(id) VALUES(1);

-- NN 속성 테스트
INSERT INTO tblExam(name) VALUES(null);
INSERT INTO tblExam(name) VALUES(null);

/*
	1. NN : default
	2. ND, NN : auto_increment
*/

DROP TABLE tblExam;

CREATE TABLE tblExam(
	id	int	auto_increment,
	name	varchar(10)	default 'no name',
	age	int	default 0,
	CONSTRAINT uk_id UNIQUE(id)
);

INSERT INTO tblExam(name, age) Values(null, null);
INSERT INTO tblExam(name) Values('hong');
INSERT INTO tblExam(age) Values(25);

**** Foreign Key ****

CREATE TABLE tblDept(
	deptno	int,
	dname	varchar(10)
);

INSERT INTO tblDept VALUES(100, 'Sales');
INSERT INTO tblDept VALUES(200, 'Research');

CREATE TABLE tblEmp(
	empno	int,
	ename	varchar(10),
	hiredate	datetime,
	deptno	int
);

INSERT INTO tblEmp(empno, ename, hiredate, deptno) VALUES(1, 'hong', now(), 300);

ALTER TABLE tblEmp ADD CONSTRAINT fk_deptno FOREIGN KEY(deptno) REFERENCES tblDept(deptno);

ALTER TABLE tblDept ADD CONSTRAINT pk_deptno PRIMARY KEY(deptno);

ALTER TABLE tblEmp ADD CONSTRAINT fk_deptno FOREIGN KEY(deptno) REFERENCES tblDept(deptno);

INSERT INTO tblEmp(empno, ename, hiredate, deptno) VALUES(1, 'hong', now(), 300);
INSERT INTO tblEmp(empno, ename, hiredate, deptno) VALUES(1, 'hong', now(), 200);

-- NC 속성 테스트
UPDATE tblDept
SET deptno = 2000
WHERE deptno = 200;

UPDATE tblDept
SET deptno = 1000
WHERE deptno = 100;

*** 참고 : DD(Data Dictionary) ***
show tables; #select * from 테이블정보
show databases;
show processlist;

DESC information_schema.table_constraints;
SELECT table_schema, table_name, constraint_type FROM information_schema.table_constraints;


14. View 테이블 : 가상 테이블
(1) 정의 : 실제 테이블을 여러 관점에서 투영한 가상 테이블
(2) 이유
	- 사용자에게 편리한 접근을 허용
	- 효율적인 리소스 관리
	- 컬럼 단위의 보안 관리가 가능
(3) 작성방법
	CREATE VIEW 뷰이름
	AS
	SELECT문;
(4) 실습
	CREATE VIEW vw_test
	AS
	SELECT empno, ename, sal, comm, dname
	FROM emp INNER JOIN dept
	ON emp.deptno = dept.deptno
	WHERE sal >= 1500;

	show tables;

	SELECT * FROM vw_test;

(5) 주의할 점
	DML 작업(INSERT, UPDATE, DELETE)


15. 인덱스(INDEX)
(1) 작성 방법
	- CREATE INDEX 인덱스명 ON 테이블(필드명, ...)
	- 제약을 통해 자동으로 생성

	CREATE TABLE tblIndex(
		id	int,
		name	varchar(10),
		point	float
	);

	INSERT INTO tblIndex VALUES(5, 'scott', 9.8); 
	INSERT INTO tblIndex VALUES(2, 'adam', 4.2);
	INSERT INTO tblIndex VALUES(7, 'john', 6.7);
	INSERT INTO tblIndex VALUES(1, 'tom', 5.0);

	EXPLAIN SELECT * FROM tblIndex WHERE point >= 4;

	CREATE INDEX idx_point ON tblIndex(point);
	
	EXPLAIN SELECT * FROM tblIndex WHERE point >= 4;

	EXPLAIN SELECT * FROM tblIndex WHERE id >= 4;

	ALTER TABLE tblIndex ADD CONSTRAINT pk_idx PRIMARY KEY(id);

	EXPLAIN SELECT * FROM tblIndex WHERE id >= 4;


16. 트랜젝션(Transaction)
	임의로 정해 놓은 작업(DML) 단위
	"All Or Nothing"

	rollback
	commit

	SELECT @@autocommit;
	SET @@autocommit = false;
	SELECT @@autocommit;

	로그파일에는 DML 작업만 기록된다.

	동기화 작업 수행

	ACID
	-----------------------
	- 원자성
	- 일관성
	- 고립성
	- 지속성

17. 데이터 모델링

(1) 프로그램 개발 과정
	1) 요구사항 수집
	2) 요구사항 분석(DB 설계 - ERD)
		- 개념적 설계
		- 논리적 설계
		- 물리적 설계
	3) 코딩
	4) 테스트
	5) 배포(납품)
	6) 유지보수

(2) 정규화
	1) 제 1 정규화 : 속성값은 반드시 원자값이어야 한다.
	2) 제 2 정규화 : 모든 키가 아닌 컬럼은 기본키 전체에 의존적이어야 한다.
		기본키 일부에 의존적이어서는 안된다.
	3) 제 3 정규화 : 키가 아닌 컬럼은 다른 키가 아닌 컬럼에 의존적이어서는 안된다.





















